_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[11],{KfQ1:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/graphql-schema-stitching",function(){return t("YY2+")}])},"YY2+":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return i}));var o=t("q1tI"),s=t.n(o),r=t("9hqX"),a=s.a.createElement;function i(){return a(r.a,{content:'# Graphql Stitching - Part 1\n\nI am going to write a short (?) post about how to create a simple API Gateway that exposes two services using Graphql Stitching. I am assuming some knowledge about graphql and Apollo Server.\nWe will use express , nodejs and apollo for the service and a technique called schema stitching.\nIf you want to learn more about Graphql you can go to the official site.\n\n## Why do we need Api gateways and schema stitching\n\nI will write a whole post about the reasons we had to use Graphql in our services and in our Api Gateway.\nHere I am offering a short explanation:\nIn real world scenarios we are creating independent and autonomous (micro)services. The less data they share, the less they need to call each other and the less coupled they are, the better.\nMany times a service manages entities (or parts of entities) that hold an id about another entity but does not need to know more details. For example an inventory service might manage productID and available units, but does not need to know about the name of the product or about its price.\nInventory service will be able to run all its operations and apply the rules it manages without requesting information to any other service.\nUsers, on the other hand, will need to see this scattered data together in one screen. In order to avoid too many requests from the UI, an API Gateway can offer a single endpoint where UI can request the data needed for a specific functionality/screen in one request, and the Gateway can orchestrate the calls to other services, cache results if needed, etc.\n\n### Let\'s start working\n\nLet\'s create a folder as the root for our project:\n\n```\nmkdir graphql-stitching\ncd graphql-stitching\n```\n\n### Creating the songs service\n\nWe are going to create a simple service that offers data about songs.\n\n```\nmkdir songs\ncd songs\nnpm init -y\nnpm install express graphql apollo-server-express body-parser\n```\n\nWe are going to create our schema first:\n\n```\ntouch schema.js\n```\n\n#### schema.js\n\n```javascript\nconst { makeExecutableSchema } = require("graphql-tools");\nconst gql = require("graphql-tag");\n\nconst songs = [\n  { id: 1, title: "I will always love you" },\n  { id: 2, title: "Lose yourself" },\n  { id: 3, title: "Eye of the tiger" },\n  { id: 4, title: "Men in Black" },\n  { id: 5, title: "The power of love" },\n  { id: 6, title: "My Heart will go on" },\n];\n\nconst typeDefs = gql`\n  type Query {\n    songs: [Song]\n    song(songId: ID!): Song\n  }\n  type Song {\n    id: ID\n    title: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    songs: () => {\n      return songs;\n    },\n    song(parent, args, context, info) {\n      return songs.find((song) => song.id === Number(args.songId));\n    },\n  },\n};\n\nmodule.exports = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n```\n\nWe are defining a list of songs.\nThe type Song (id, title) and two queries for getting all songs and one song by id.\n\nLet\'s create the api:\n\n```\ntouch index.js\n```\n\n#### index.js\n\n```javascript\nconst express = require("express");\nconst { ApolloServer } = require("apollo-server-express");\nconst cors = require("cors");\nconst schema = require("./schema");\nconst bodyParser = require("body-parser");\n\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\n\nconst server = new ApolloServer({\n  playground: {\n    endpoint: "/api",\n    settings: {\n      "editor.cursorShape": "block",\n      "editor.cursorColor": "#000",\n      "editor.theme": "light",\n    },\n  },\n  schema,\n});\n\nserver.applyMiddleware({ app, path: "/api" });\n\napp.listen(3000, () => {\n  console.log("Song services listening to 3000...");\n});\n```\n\nWe create a simple express service using apollo engine to expose both the api and the playground to tests our api.\n\n```\nnode index.js\n```\n\nand open the [songs api](http://localhost:3000)\nYou will see the playground, so you can run the first query:\n\n```\n{\n  songs {\n    id\n    title\n  }\n}\n```\n\nyou should be able to see the results.\n\n### Creating the movies service\n\nWe are going to follow the same process. From the root of our project:\n\n```\nmkdir movies\ncd movies\ntouch index.js\ntouch schema.js\nnpm init -y\nnpm install express graphql apollo-server-express body-parser graphql-tag\n```\n\nindex.js will be similar to the previous one. Only the port number needs to be different\n\n```javascript\nconst express = require("express");\nconst { ApolloServer } = require("apollo-server-express");\nconst cors = require("cors");\nconst schema = require("./schema");\nconst bodyParser = require("body-parser");\n\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\n\nconst server = new ApolloServer({\n  playground: {\n    endpoint: "/api",\n    settings: {\n      "editor.cursorShape": "block",\n      "editor.cursorColor": "#000",\n      "editor.theme": "light",\n    },\n  },\n  schema,\n});\n\nserver.applyMiddleware({ app, path: "/api" });\n\napp.listen(3001, () => {\n  console.log("Movie services listening to 3001...");\n});\n```\n\nSchema will be very similar:\n\n```javascript\nconst { makeExecutableSchema } = require("graphql-tools");\nconst gql = require("graphql-tag");\n\nconst movies = [\n  { id: 1, title: "The Bodyguard", mainSongId: 1 },\n  { id: 2, title: "8 Mile", mainSongId: 2 },\n  { id: 3, title: "Rocky III", mainSongId: 3 },\n  { id: 4, title: "Men in Black", mainSongId: 4 },\n  { id: 5, title: "Back to the Future", mainSongId: 5 },\n  { id: 6, title: "Titanic", mainSongId: 6 },\n];\n\nconst typeDefs = gql`\n  type Query {\n    movies: [Movie]\n    movie(movieId: ID!): Movie\n  }\n  type Movie {\n    id: ID!\n    title: String!\n    mainSongId: ID!\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    movies: () => {\n      return movies;\n    },\n    movie(parent, args, context, info) {\n      return movies.find((movie) => movie.id === Number(args.movieId));\n    },\n  },\n};\n\nmodule.exports = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n```\n\nThe difference is that movie has a reference to songs. Specifically mainSongId. Since both services are isolated and are autonomous, movie service does not know where songs service is, or what data a songs holds. Only knows that a movie has a main song and it holds its ID.\n\nIf we run the project in the same way\n\n```\nnode index.js\n```\n\nwe can see the [playground](http://localhost:3001) and run our test queries.\n\n### Let\'s start the interesting part. Our Api gateway\n\nWe are going to create the same files. From project root:\n\n```\nmkdir apigateway\ncd apigateway\ntouch index.js\ntouch schema.js\nnpm init -y\nnpm install express graphql apollo-server-express body-parser graphql-tag apollo-link-http node-fetch\n```\n\nThe schema will created based on the schemas of the other services, so we are going to stitch and expose them in the api gateway.\n\n#### schema.js\n\n```javascript\nconst {\n  introspectSchema,\n  makeRemoteExecutableSchema,\n  mergeSchemas,\n} = require("graphql-tools");\nconst { createHttpLink } = require("apollo-link-http");\nconst fetch = require("node-fetch");\n\nconst MoviesUrl = "http://localhost:3001/api";\nconst SongsUrl = "http://localhost:3000/api";\n\nasync function createServiceSchema(url) {\n  const link = createHttpLink({\n    uri: url,\n    fetch,\n  });\n  const schema = await introspectSchema(link);\n  return makeRemoteExecutableSchema({\n    schema,\n    link,\n  });\n}\n\nasync function createSchemas() {\n  const movieSchema = await createServiceSchema(SongsUrl);\n  const songsSchema = await createServiceSchema(MoviesUrl);\n\n  return mergeSchemas({ schemas: [songsSchema, movieSchema] });\n}\n\nmodule.exports = createSchemas();\n```\n\nAs you can see in the code, the schema is generated by requesting the schemas of both APIs and merging them.\nOne difference is, now we need to request this data before being able to start the apigateway, so the index.js will be slightly different:\n\n```javascript\nconst express = require("express");\nconst { ApolloServer } = require("apollo-server-express");\nconst cors = require("cors");\nconst createSchema = require("./schema");\nconst bodyParser = require("body-parser");\n\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\n\ncreateSchema.then((schema) => {\n  const server = new ApolloServer({\n    playground: {\n      endpoint: "/api",\n      settings: {\n        "editor.cursorShape": "block",\n        "editor.cursorColor": "#000",\n        "editor.theme": "light",\n      },\n    },\n    schema,\n  });\n\n  server.applyMiddleware({ app, path: "/api" });\n\n  app.listen(4000, () => {\n    console.log("Graphql listening to 4000...");\n  });\n});\n```\n\nBefore starting the listener, the schema is requested and merged so we can expose it in our api.\n\nWe need to run the previous services in order to be able to execute this one. From the root of the project:\n\n```\nnode movies/index.js &\nnode songs/index.js &\nnode apigateway/index.js\n```\n\nIf we go to the api gateway playground we can query movies and songs in the same query:\n\n```\n{\n  movies{\n    id\n    title\n    mainSongId\n  }\n\n  songs {\n    id\n    title\n  }\n}\n```\n\nThis was an introduction to schema stitching. In part 2 I will show some more concepts and real case scenarios like extending the services\' schema in the api gateway with custom resolvers, how to optimize by using dataloaders.\n\nIf you have any questions about graphql schema stitching or about api gateway in general, please add your comment or contact me.\n'})}}},[["KfQ1",0,1,2,4]]]);